import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import { draftMode } from "next/dist/client/components/headers";
import Head from "next/head";
import Link from "next/link";
import type { RouterOutputs } from "~/utils/api";
import { api } from "~/utils/api";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image"
import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { useState } from "react";
import { set } from "zod";
import { toast } from "react-hot-toast";

dayjs.extend(relativeTime)

const CreatePostWizard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  const ctx = api.useUtils();

  const {mutate, isLoading: isPosting} = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;
      if(errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0])
      }
      else{
        toast.error("Failed to post, try again later!")
      }
    }     
  });

  if (!user) return null;
  
  return (
    <div className="flex gap-3 w-full">
      <Image 
      src={user.profileImageUrl} 
      alt="Profile Image" 
      className="h-14 w-14 rounded-full"
      width={56}
      height={56} 
      />        
      <input placeholder="Type some emojis..." 
      className="grow bg-transparent outline-none"
      type="text"
      value={input}
      onChange={(e) => setInput(e.target.value) }
      onKeyDown={(e) => {
        if(e.key === "Enter") {
          e.preventDefault();
          if(input !== ""){
            mutate({ content: input });
          }
        }
      }}
      disabled={isPosting}>       
      </input>
      {input !== "" && !isPosting && (
        <button onClick={() => mutate({content: input})}>Post</button>
      )}
      {isPosting && (
        <div className="flex items-center justify-center">
          <LoadingSpinner size={20}/>
       </div>)}
    </div >
  )
}

type PostWithUser = RouterOutputs["posts"]["getAll"][number]

const PostView = (props: PostWithUser) => {
  const { post, author} = props;
  return (
  <div className="flex gap-3 border-b border-slate-500 p-4">
    <Image 
      className="h-14 w-14 rounded-full" 
      src={author.profileImage} 
      alt={`@${author.username}'s profile pic`} 
      width={56}
      height={56}
    />
    <div className="flex flex-col">
      <div className="flex text-slate-400 gap-3">
        <Link href= {`/@${author.username} `}>
          <span>{`@${author.username}`}</span>
        </Link>
        <Link href= {`/post/${post.id} `}>
          <span className="font-thin">{` Â· ${dayjs(post.createdAt).fromNow()}`}</span>
        </Link>
      </div>
      <span className="text-2xl">{post.content}</span>
    </div>   
  </div>
  );       
}

const Feed = () => {
  const {data, isLoading: postsLoading} = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage /> 

  if (!data) return <div>Woops something went wrong...</div>

  return (
    <div className="flex flex-col">
      {data.map((postWithUser) => (
      <PostView key={postWithUser.post.id} {...postWithUser} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const {isSignedIn: userSignedIn, isLoaded: userLoaded} = useUser();

  // start fetching data asap
  api.posts.getAll.useQuery();

  // Return empty div if user not loaded
  if (!userLoaded) return <div />
  
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen border-x-4">
        <div className="w-full md:max-w-2xl border-x border-slate-500">
          <div className="flex border-b border-slate-500 p-4">           
              {!userSignedIn && (
                <div className="flex justify-center">
                  <SignInButton />
                </div>
                )}              
              {!!userSignedIn &&  <CreatePostWizard />}      
          </div>
          <Feed />            
        </div>      
      </main>
    </>
  );
};

export default Home;
